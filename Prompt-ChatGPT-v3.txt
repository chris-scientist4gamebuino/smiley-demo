Tu es un expert Javascript mais attention à bien respecter les contraintes de la technologie que j'utilise qui a ses spécificités (voir exemple de code notamment).
Voici l'ensemble des contraintes :
- rect(nombre, nombre, nombre, nombre) avec en premier paramètre la coordonnée en x, en deuxième la coordonnée en y, en troisième la largeur et enfin la hauteur. Cette fonction permet de dessiner un rectangle.
- setPen(nombre, nombre, nombre) avec en premier la composante rouge, ensuite la composante verte puis la composante bleu. Il ne faut pas écrire setPen(setPen(nombre, nombre, nombre)) mais setPen(nombre, nombre, nombre). Cette fonction permet de changer de couleur.
- Tu peux utiliser une ou plusieurs classes (en suivant la syntaxe de l'exemple).
- Dans le code principale la fonction init() initialise la matériel cible et le programme. La fonction update(time) permet par exemple de contrôler les entrées relative à une interaction de l'utilisateur (par exemple pression sur la touche haut). Enfin la fonction render() permet de gérer l'affichage à l'écran.
- La structure de contrôle switch n'est pas implémentée dans la technologie cible. A la place il faut utiliser des if.
- Pour dire que la touche gauche est pressée tu utilisera LEFT (et non pressed(LEFT), par exemple un code valide, pour tester si la touche gauche est pressée, est : /* début exemple */ if(LEFT) { /* TODO Compléter avec action */ } /* fin exemple */). Pour la touche haut c'est UP. Pour la touche droite c'est RIGHT. Et pour la touche bas c'est DOWN.
- Tu ne doit utiliser aucune autre fonction / API que celle que je viens de donner.
- Je souhaite que tu dessine un smiley qui est souriant quand on appuie sur haut (il doit sourire, j'insiste). Quand on appuie sur droite le smiley doit faire une grimace. Quand on appuie sur bas le smiley doit être triste. Quand on appuie sur gauche le smiley doit faire un clin d'oeil. Par défaut, quand l'utilisateur n'appuie sur rien, et quand l'on arrête d'appuyer sur une touche il faut revenir à un smiley neutre.
- Le smiley doit être centrer à l'écran. Sachant que l'écran mesure 160 de large par 128 de haut. 
- La couleur du visage du smiley doit être jaune. La bouche doit être rouge. Les yeux sont en noir.
- La couleur de fond d'écran doit être noir.

Tu trouvera un exemple de code dans la technologie cible. En respectant l'ensemble de ces contraintes, peux tu me générer le code source ?


/* Début de l'exemple */

"push title Game Title";
"push author Your Name";
"push description A MicoJS game";
"set version v0.0.1";
"set category game";
"set url https://micojs.github.com";

const bgColor = setPen(0, 0, 0);
const txtColor = setPen(64, 128, 255);

let screenWidth, screenHeight;

class Wheel {
    init() {
        this.x = screenWidth/2;
        this.y = screenHeight/2;
        this.speedX = rand(-3, 3);
        this.speedY = rand(-3, 3);
        this.color = 0;
    }

    update() {
        if (A)
            this.color++;
        if (B)
            this.color = 0;

        this.x += this.speedX;
        this.y += this.speedY;

        let bounce = false;
        while (!this.speedX || (this.x > screenWidth && this.speedX > 0) || (this.x < 0 && this.speedX < 0)) {
            this.speedX = rand(-5, 5);
            bounce = true;
        }
        while (!this.speedY || (this.y > screenHeight && this.speedY > 0) || (this.y < 0 && this.speedY < 0)) {
            this.speedY = rand(-5, 5);
            bounce = true;
        }
        if (bounce)
            debug("Bounce");
    }

    render() {
        setMirrored(this.speedX < 0);
        setFlipped(this.speedY < 0);
        setPen(this.color);
        image(R.wheel, this.x, this.y);
    }
}

const wheel = new Wheel();

function init() {
    screenWidth = getWidth();
    screenHeight = getHeight();
    wheel.init();
}

function update(time) {
    wheel.update();
}

function render() {
    setPen(bgColor);
    clear();
    wheel.render();
    setPen(txtColor);
    text("Hello world!", 5, 5);
}

/* Fin de l'exemple */